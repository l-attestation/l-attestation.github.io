---
title: "La France des polices municipales"
description: "Cartographier les initiatives sécuritaires locales"
date: 2023-06-25
date-modified: today
categories: [La Police des sorties]
citation: 
  url: https://l-attestation.github.io/exercices/polices-municipales/ 
draft: false
---

## Charger les principaux packages

```{r packages}
library(here)
library(tidyverse)
library(huxtable)
library(fedmatch)
library(sf)
library(tmap)
```

## Récupérer les données

Les effectifs des polices municipales par communes pour les années 2012 à 2021 ont été publiées par le Ministère de l'Intérieur sur le site [data.gouv.fr](https://www.data.gouv.fr/fr/datasets/police-municipale-effectifs-par-commune/).

Le code suivant télécharge le fichier de données dans un sous-dossier data (à ne faire qu'une fois, évidemment).

```{r path}
polices_municipales_path = here("data", "polices_municipales.ods")
```

```{r download}
#| eval: false
download.file(url = "https://www.data.gouv.fr/fr/datasets/r/ad814337-074c-459b-add1-d78df9e6d85f",
              destfile = polices_municipales_path)
```


## Les lire

```{r read}
pm = readODS::read_ods(polices_municipales_path, skip = 8, col_names = FALSE, .name_repair = janitor::make_clean_names) |> 
  select(x, x_2, x_4:x_10) |> 
  rename(code_departement = x,
         nom_departement = x_2,
         nom_commune = x_4,
         population = x_5,
         municipaux = x_6,
         asvp = x_7,
         gardes_champetres = x_8,
         maitres_chiens = x_9,
         chiens_patrouille = x_10) |> 
  mutate(total = municipaux + gardes_champetres + asvp) |> 
  filter(!is.na(code_departement))
```

::: {.callout-caution}
Pour être exploitées au niveau communal, ces données requièrent des recodages laborieux. Il n'y a pas de code postal pour les communes. Et aucune cohérence dans la manière d'écrire leurs noms (majuscules, minuscules, tirets et espaces, abréviations, etc.). 
:::

## Recodage communes

Nettoyer le nom des communes.

```{r clean_com}
pm_com = pm |> 
  filter(!str_detect(code_departement, "TOTAL")) |> 
  mutate(code_departement = if_else(code_departement %in% as.character(1:9),
                                    str_c("0", code_departement),
                                    code_departement),
         nom_commune_clean = stringi::stri_trans_general(nom_commune, "Latin-ASCII"),
         nom_commune_clean = clean_strings(nom_commune_clean)) |>
  select(code_departement, nom_commune_clean, total)
```

```{r glimpse_pm_com}
glimpse(pm_com)
```


## Récupérer la couche cartographique

Télécharger la couche cartographique des communes en 2020 dans un sous-dossier `data` du projet (à ne faire qu'une fois).

```{r download_com_sf}
#| eval: false
CARTElette::charger_carte(destfile = here::here("data"),
                          COG = 2020,
                          nivsupra = "COM")
```

Lire la couche cartographique et nettoyer le nom des communes de la même manière que dans la base des polices municipales. La population indiquée est celle comptabilisée par le recensement de 2017.

```{r read_com_sf}
com_sf = st_read(here("data", "COM_2020_CARTElette.shp")) |> 
  janitor::clean_names() |> 
  select(insee_dep, insee_com, nom_com, population) |> 
  rename(code_departement = insee_dep,
         code_commune = insee_com,
         nom_commune = nom_com,
         population_2017 = population) |> 
  mutate(nom_commune_clean = stringi::stri_trans_general(nom_commune, "Latin-ASCII"),
         nom_commune_clean = clean_strings(nom_commune_clean)) |> 
  relocate(nom_commune_clean, .after = nom_commune)
```

```{r glimpse_com_sf}
glimpse(com_sf)
```

## Jointure

::: {.callout-warning}
Il y a des homonymes parmi les communes. Pour réduire les jointures multiples, on peut commencer par joindre par le nom "nettoyé" de la commune et le code du département. Mais attention, celui-ci n'est pas écrit de la même façon dans les deux bases de données.
:::

```{r pm_sf}
pm_com_sf = com_sf |> 
  inner_join(pm_com, by = join_by(code_departement, nom_commune_clean))
```

Ce nettoyage nous permet de géolocaliser 4074 communes sur 4524. 

## Cartographier

```{r map_pm_sf}
pm_com_sf |> 
  mutate(policier_par_habitant = total / population_2017) |> 
  filter(policier_par_habitant > mean(policier_par_habitant, na.rm = T)) |>
  st_centroid() |> 
  # filter(policier_par_habitant > quantile(policier_par_habitant, 0.75)) %>%
  ggplot() +
  geom_sf(size = 1, alpha = 0.5, colour = "#E12634") +
  theme_void()
```


## Comptage par département

On reprend directement les calculs des auteurs de la base.

```{r pm_dep}
pm_dep = pm |> 
  filter(str_detect(code_departement, "TOTAL"),
         !str_detect(code_departement, "NATIONAL")) |> 
  mutate(total = municipaux + gardes_champetres + asvp,
         departement = str_remove(code_departement, "^TOTAL ")) |>
  select(departement, total) |> 
  arrange(desc(total))
```

```{r pm_dep_huxtable}
pm_dep |> 
  as_huxtable() |> 
  set_number_format(NA) |> 
  theme_orange()
```

On peut s'interroger sur l'existence d'un demi-policier dans le Var...

