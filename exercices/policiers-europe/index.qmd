---
title: "Où y a-t-il le plus de policiers en Europe ?"
description: "Calculer la concentration policière dans chaque pays, grâce aux données d'eurostat et de la banque mondiale"
date: 2023-06-25
categories: [FAQ]
citation: 
  url: https://l-attestation.github.io/exercices/policiers-europe/
draft: false
---

## Charger les principaux packages

```{r packages}
library(here)
library(tidyverse)
library(countrycode)
library(huxtable)
```

## Récupérer les données

::: callout-tip
Pour récupérer des données sur les pays européens, le package [eurostat](https://ropengov.github.io/eurostat/articles/eurostat_tutorial.html) est votre ami. Parcourez le catalogue avec la fonction `eurostat::get_eurostat_toc()`
:::

```{r eurostat_path}
crim_just_job_path = here("data", "crim_just_job.rds")
```

```{r eurostat_download}
#| eval: false
eurostat::get_eurostat("crim_just_job", type = "label", cache_dir = here("data")) |>
  write_rds(crim_just_job_path)
```

```{r eurostat_read}
crim_just_job = read_rds(crim_just_job_path)
```

## Les inspecter

```{r check_raw_eurostat}
crim_just_job
```

## Les recoder

::: callout-tip
Dès que vous devez manipuler des noms et codes de pays, pensez au package [countrycode](https://vincentarelbundock.github.io/countrycode/).
:::

```{r recode_eurostat}
police_europe = crim_just_job  |> 
  pivot_wider(names_from = c(sex, isco08, unit),
              values_from = "values",
              names_repair = janitor::make_clean_names) |> 
  complete(geo, time) |> 
  mutate(geo = if_else(geo %in% c("Scotland", "England and Wales", "Northern Ireland (UK)"),
                       "United Kingdom", geo)) |>
  summarise(across(ends_with("number"), ~ sum(.x, na.rm = F)), .by = c(geo, time)) |> 
  mutate(geo = str_replace(geo, "Türkiye", "Turkey"),
         geo = if_else(str_detect(geo, "Germany"), "Germany", geo),
         geo = if_else(str_detect(geo, "Kosovo"), "Republic of Kosovo", geo),
         year = year(time),
         wb = countrycode(geo, origin = "country.name", destination = "wb")) |>
  select(wb, year, total_police_officers_number)
```

On manque de données pour certaines années, pour certains pays :

```{r}
questionr::freq.na(police_europe)
```

Maintenant les données ressemblent à ceci :

```{r check_eurostat_recoded}
police_europe
```

## Calculer le nombre de policiers par habitant

Ce calcul a déjà été effectué par les auteurs de la base téléchargée. Toutefois, un examen attentif des données montre quelques choix un peu curieux, et nous incite à le refaire nous-même, par précaution.

::: callout-tip
Le package [wbstats](https://cran.r-project.org/web/packages/wbstats/vignettes/wbstats.html) donne accès aux données de la Banque mondiale, parmi lesquelles le nombre d'habitant, le PIB par tête, etc.
:::

```{r path_wb}
wb_path = here("data", "wb.rds")
```

L'argument `mrv` donne le nombre de *most recent values* à requérir. L'argument `gapfill = TRUE` remplace les valeurs manquantes éventuelles par la valeur précédente la plus récente.

```{r download_wb}
#| eval: false
wbstats::wb_data(country = "countries_only",
                 indicator = c("gdp_per_capita" = "NY.GDP.PCAP.CD",
                               "population" = "SP.POP.TOTL"),
                 mrv = 15,
                 gapfill = TRUE) |>
  write_rds(wb_path)
```

```{r read_wb}
wb = read_rds(wb_path) |> 
  mutate(country = str_replace(country, "Turkiye", "Turkey"),
         wb = countrycode(country, origin = "country.name", destination = "wb")) %>%
  rename(year = date) %>%
  select(-iso2c, -iso3c, -country)
```

```{r divide}
police_europe_pcm = police_europe |>
    filter(!is.na(total_police_officers_number),
           year <= 2020) |> 
    filter(year == max(year, na.rm = TRUE), .by = wb) |> 
    left_join(wb, by = join_by(wb, year)) |>
    mutate(policiers_pcm = total_police_officers_number / population * 100000) |>
  mutate(pays = countrycode(wb, origin = "wb", destination = "country.name.fr"),
         pays = if_else(wb == "MNE", "Monténégro", pays),
         pays = if_else(wb == "MKD", "Macédoine du Nord", pays),
         policiers_pcm = round(policiers_pcm)) |> 
  arrange(desc(policiers_pcm))
```

## Palmarès

### Tableau

:::{.callout-note}
La colonne "Année" indique la dernière année pour laquelle des données sont disponibles.
:::

```{r palmares_huxtable}
police_europe_pcm |>  
  select(pays, year, policiers_pcm) |> 
  rename(Pays = pays,
         "Année" = year,
         "Policiers pour 100 000 habitants" = policiers_pcm) |> 
  as_huxtable() |> 
  set_number_format(NA) |> 
  huxtable::theme_blue()
```

### Graphique

```{r palmares_plot}
police_europe_pcm |> 
  mutate(pays = fct_reorder(pays, policiers_pcm)) |> 
  ggplot(aes(x = policiers_pcm, y = pays)) +
  geom_bar(stat = "identity") +
  labs(x = "Policiers pour 100 000 habitants",
       y = "",
       title = "Les Européens mieux protégés (?) au Sud et à l'Est") +
  theme_minimal()
```
